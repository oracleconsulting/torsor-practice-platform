import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { CheckCircle, AlertTriangle, TrendingUp, DollarSign, Shield, Target, Loader2, AlertCircle } from 'lucide-react';
import { part3Sections } from '@/data/part3Questions';
import { useAssessmentProgress } from '@/hooks/useAssessmentProgress';
import { motion } from 'framer-motion';

export const Part3Review: React.FC = () => {
  const { progress, loading } = useAssessmentProgress();
  const [activeTab, setActiveTab] = useState('overview');

  // Extract data from progress
  const part3Answers = progress?.part3Answers || {};
  const valueAnalysis = progress?.valueAnalysis;
  const assetScores = progress?.assetScores || [];
  const valueGaps = progress?.valueGaps || [];
  const riskRegister = progress?.riskRegister || [];
  const actionPlan = progress?.actionPlan;

  const formatAnswer = (answer: any): string => {
    if (Array.isArray(answer)) {
      return answer.join(', ');
    }
    if (typeof answer === 'object' && answer !== null) {
      return JSON.stringify(answer, null, 2);
    }
    return String(answer || 'Not answered');
  };

  const getQuestionTitle = (fieldName: string): string => {
    // Find the question in part3Sections
    for (const section of part3Sections) {
      for (const question of section.questions) {
        if (question.fieldName === fieldName) {
          return question.question;
        }
      }
    }
    return fieldName.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
  };

  const getSectionTitle = (fieldName: string): string => {
    for (const section of part3Sections) {
      for (const question of section.questions) {
        if (question.fieldName === fieldName) {
          return section.title;
        }
      }
    }
    return 'Unknown Section';
  };

  const groupedAnswers = Object.entries(part3Answers).reduce((acc, [fieldName, answer]) => {
    const sectionTitle = getSectionTitle(fieldName);
    if (!acc[sectionTitle]) {
      acc[sectionTitle] = [];
    }
    acc[sectionTitle].push({ fieldName, answer });
    return acc;
  }, {} as Record<string, Array<{ fieldName: string; answer: any }>>);

  const formatCurrency = (value: number): string => {
    if (value >= 1000000) {
      return `£${(value / 1000000).toFixed(1)}M`;
    } else if (value >= 1000) {
      return `£${(value / 1000).toFixed(0)}k`;
    }
    return `£${value.toLocaleString()}`;
  };

  const getSeverityColor = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <Loader2 className="w-8 h-8 animate-spin text-purple-600 mx-auto mb-4" />
          <p className="text-gray-600">Loading your value analysis...</p>
        </div>
      </div>
    );
  }

  // Check if value analysis data exists
  if (!valueAnalysis && !assetScores.length && !valueGaps.length && !riskRegister.length) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <AlertCircle className="w-12 h-12 text-orange-500 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-800 mb-2">Analysis in Progress</h3>
          <p className="text-gray-600 mb-4">
            Your value analysis is being generated by our AI. This typically takes a few minutes.
          </p>
          <p className="text-sm text-gray-500">
            Please check back in a few minutes or refresh the page.
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="assets">Hidden Assets</TabsTrigger>
          <TabsTrigger value="risks">Risks</TabsTrigger>
          <TabsTrigger value="actions">Action Plan</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          {/* Value Analysis Summary */}
          {valueAnalysis && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <Card className="bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-purple-900">
                    <DollarSign className="w-5 h-5" />
                    Value Analysis Summary
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div className="text-center p-4 bg-white rounded-lg">
                      <div className="text-2xl font-bold text-purple-600">
                        {formatCurrency(valueAnalysis.current_valuation || 0)}
                      </div>
                      <div className="text-sm text-gray-600">Current Valuation</div>
                    </div>
                    <div className="text-center p-4 bg-white rounded-lg">
                      <div className="text-2xl font-bold text-green-600">
                        {formatCurrency(valueAnalysis.potential_valuation || 0)}
                      </div>
                      <div className="text-sm text-gray-600">Potential Valuation</div>
                    </div>
                    <div className="text-center p-4 bg-white rounded-lg">
                      <div className="text-2xl font-bold text-blue-600">
                        {valueAnalysis.percentage_increase?.toFixed(1) || 'N/A'}%
                      </div>
                      <div className="text-sm text-gray-600">Increase Potential</div>
                    </div>
                    <div className="text-center p-4 bg-white rounded-lg">
                      <div className="text-2xl font-bold text-orange-600">
                        {valueAnalysis.exit_readiness_score?.toFixed(0) || 'N/A'}/100
                      </div>
                      <div className="text-sm text-gray-600">Exit Readiness</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          )}

          {/* Asset Scores */}
          {assetScores.length > 0 && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.1 }}
            >
              <Card className="bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-blue-900">
                    <Target className="w-5 h-5" />
                    Asset Scores
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {assetScores.map((asset, index) => (
                      <div key={index} className="bg-white p-4 rounded-lg">
                        <div className="flex justify-between items-center mb-2">
                          <span className="font-medium text-gray-900">{asset.category}</span>
                          <Badge variant={asset.score >= 7 ? 'default' : asset.score >= 4 ? 'secondary' : 'destructive'}>
                            {asset.score}/{asset.maxScore || 10}
                          </Badge>
                        </div>
                        <Progress 
                          value={(asset.score / (asset.maxScore || 10)) * 100} 
                          className="mb-2"
                        />
                        {asset.issues && asset.issues.length > 0 && (
                          <div className="text-sm text-red-600 mb-2">
                            <strong>Issues:</strong> {asset.issues.join(', ')}
                          </div>
                        )}
                        {asset.opportunities && asset.opportunities.length > 0 && (
                          <div className="text-sm text-green-600">
                            <strong>Opportunities:</strong> {asset.opportunities.join(', ')}
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          )}
        </TabsContent>

        <TabsContent value="assets" className="space-y-6">
          {/* Value Gaps */}
          {valueGaps.length > 0 && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <Card className="bg-gradient-to-r from-green-50 to-emerald-50 border-green-200">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-green-900">
                    <TrendingUp className="w-5 h-5" />
                    Value Gaps & Opportunities
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {valueGaps.map((gap, index) => (
                      <div key={index} className="bg-white p-4 rounded-lg border border-green-200">
                        <div className="flex justify-between items-start mb-2">
                          <h4 className="font-medium text-gray-900">{gap.area}</h4>
                          <Badge variant="outline" className="text-green-700 border-green-300">
                            {formatCurrency(gap.gap || 0)}
                          </Badge>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
                          <div>
                            <span className="text-sm text-gray-600">Current Value:</span>
                            <div className="font-medium">{formatCurrency(gap.currentValue || 0)}</div>
                          </div>
                          <div>
                            <span className="text-sm text-gray-600">Potential Value:</span>
                            <div className="font-medium text-green-600">{formatCurrency(gap.potentialValue || 0)}</div>
                          </div>
                          <div>
                            <span className="text-sm text-gray-600">Timeframe:</span>
                            <div className="font-medium">{gap.timeframe || '3-6 months'}</div>
                          </div>
                        </div>
                        {gap.actions && gap.actions.length > 0 && (
                          <div className="text-sm text-gray-600">
                            <strong>Actions:</strong> {gap.actions.join(', ')}
                          </div>
                        )}
                        <div className="flex gap-2 mt-2">
                          <Badge variant="secondary" className="text-xs">
                            {gap.effort || 'Medium'} effort
                          </Badge>
                          <Badge variant="secondary" className="text-xs">
                            {gap.impact || 'High'} impact
                          </Badge>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          )}
        </TabsContent>

        <TabsContent value="risks" className="space-y-6">
          {/* Risk Register */}
          {riskRegister.length > 0 && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <Card className="bg-gradient-to-r from-red-50 to-orange-50 border-red-200">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-red-900">
                    <Shield className="w-5 h-5" />
                    Risk Register
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {riskRegister.map((risk, index) => (
                      <div key={index} className="bg-white p-4 rounded-lg border border-red-200">
                        <div className="flex justify-between items-start mb-2">
                          <h4 className="font-medium text-gray-900">{risk.title || risk.risk}</h4>
                          <Badge className={`${getSeverityColor(risk.severity)}`}>
                            {risk.severity}
                          </Badge>
                        </div>
                        <p className="text-sm text-gray-600 mb-2">{risk.description || risk.impact}</p>
                        {risk.mitigation && (
                          <div className="text-sm">
                            <span className="font-medium text-green-700">Mitigation: </span>
                            <span className="text-gray-600">{risk.mitigation}</span>
                          </div>
                        )}
                        {risk.cost && (
                          <div className="text-sm mt-1">
                            <span className="font-medium text-orange-700">Estimated Cost: </span>
                            <span className="text-gray-600">{formatCurrency(risk.cost)}</span>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          )}
        </TabsContent>

        <TabsContent value="actions" className="space-y-6">
          {/* Action Plan */}
          {actionPlan && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <Card className="bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-purple-900">
                    <Target className="w-5 h-5" />
                    90-Day Action Plan
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    {/* Quick Wins */}
                    {actionPlan.quick_wins && actionPlan.quick_wins.length > 0 && (
                      <div>
                        <h3 className="font-semibold text-lg mb-3 text-green-700">
                          Quick Wins (Week 1-2)
                        </h3>
                        <div className="space-y-2">
                          {actionPlan.quick_wins.map((win: any, index: number) => (
                            <div key={index} className="flex items-start p-3 bg-green-50 rounded-lg">
                              <CheckCircle className="h-5 w-5 text-green-600 mr-3 mt-0.5" />
                              <div className="flex-1">
                                <p className="font-medium">{win.area}</p>
                                <p className="text-sm text-gray-600">
                                  {win.actions?.join(', ') || win.description}
                                </p>
                                {win.gap && (
                                  <p className="text-sm text-green-600 mt-1">
                                    Impact: {formatCurrency(win.gap)} potential value
                                  </p>
                                )}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Critical Fixes */}
                    {actionPlan.critical_fixes && actionPlan.critical_fixes.length > 0 && (
                      <div>
                        <h3 className="font-semibold text-lg mb-3 text-red-700">
                          Critical Fixes (Week 3-4)
                        </h3>
                        <div className="space-y-2">
                          {actionPlan.critical_fixes.map((fix: any, index: number) => (
                            <div key={index} className="flex items-start p-3 bg-red-50 rounded-lg">
                              <AlertTriangle className="h-5 w-5 text-red-600 mr-3 mt-0.5" />
                              <div className="flex-1">
                                <p className="font-medium">{fix.title || fix.risk}</p>
                                <p className="text-sm text-gray-600">
                                  {fix.mitigation || fix.description}
                                </p>
                                {fix.cost && (
                                  <p className="text-sm text-red-600 mt-1">
                                    Cost: {formatCurrency(fix.cost)}
                                  </p>
                                )}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Strategic Initiatives */}
                    {actionPlan.strategic_initiatives && actionPlan.strategic_initiatives.length > 0 && (
                      <div>
                        <h3 className="font-semibold text-lg mb-3 text-blue-700">
                          Strategic Initiatives (Week 5-12)
                        </h3>
                        <div className="space-y-2">
                          {actionPlan.strategic_initiatives.map((initiative: any, index: number) => (
                            <div key={index} className="flex items-start p-3 bg-blue-50 rounded-lg">
                              <TrendingUp className="h-5 w-5 text-blue-600 mr-3 mt-0.5" />
                              <div className="flex-1">
                                <p className="font-medium">{initiative.area}</p>
                                <p className="text-sm text-gray-600">
                                  {initiative.actions?.join(', ') || initiative.description}
                                </p>
                                {initiative.gap && (
                                  <p className="text-sm text-blue-600 mt-1">
                                    Impact: {formatCurrency(initiative.gap)} potential value
                                  </p>
                                )}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Summary */}
                    <div className="bg-purple-100 p-4 rounded-lg">
                      <h4 className="font-semibold text-purple-900 mb-2">Summary</h4>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                        <div>
                          <p className="text-gray-600">Total Actions:</p>
                          <p className="font-semibold">{actionPlan.total_actions || 0}</p>
                        </div>
                        <div>
                          <p className="text-gray-600">Estimated Impact:</p>
                          <p className="font-semibold text-purple-700">
                            {formatCurrency(actionPlan.estimated_impact || 0)}
                          </p>
                        </div>
                        <div>
                          <p className="text-gray-600">Time Requirement:</p>
                          <p className="font-semibold">{actionPlan.time_requirement || '10-15 hours/week'}</p>
                        </div>
                        <div>
                          <p className="text-gray-600">Timeline:</p>
                          <p className="font-semibold">90 days</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          )}
        </TabsContent>
      </Tabs>

      {/* Part 3 Answers by Section */}
      {Object.keys(groupedAnswers).length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Card className="border-gray-200">
            <CardHeader>
              <CardTitle className="text-xl text-gray-900">Your Assessment Responses</CardTitle>
            </CardHeader>
            <CardContent>
              {Object.entries(groupedAnswers).map(([sectionTitle, answers]) => (
                <div key={sectionTitle} className="mb-6">
                  <h3 className="text-lg font-semibold text-gray-800 mb-4">{sectionTitle}</h3>
                  <div className="space-y-4">
                    {answers.map(({ fieldName, answer }) => (
                      <div key={fieldName} className="bg-gray-50 rounded-lg p-4">
                        <h4 className="font-medium text-gray-900 mb-2">
                          {getQuestionTitle(fieldName)}
                        </h4>
                        <div className="text-gray-700">
                          {Array.isArray(answer) ? (
                            <ul className="list-disc list-inside space-y-1">
                              {answer.map((item, idx) => (
                                <li key={idx}>{item}</li>
                              ))}
                            </ul>
                          ) : (
                            <p className="whitespace-pre-wrap">{formatAnswer(answer)}</p>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </motion.div>
      )}
    </div>
  );
}; 